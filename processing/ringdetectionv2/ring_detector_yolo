import math
import time
from cscore import CameraServer as cs
import cv2
import numpy as np
import robotpy_apriltag
import ultralytics
from ultralytics import YOLO

ultralytics.check()

detection_colors = []
detection_colors.append(0, 255, 40)

modelPath = "/ringdetectionv2/ringdetector.pt"

def main():
    height = 480
    width = 640

    usb2 = cs.startAutomaticCapture(name = "cam2", path ='/dev/v41/by-path/platform-fd500000.pcie-pci-0000:01:00.0-usb-0:1.2:1.0-video-index0')
    time.sleep(1.25)

    cam2_input_stream = cs.getVideo(camera = usb2)
    img = np.zeros(shape = (height, width, 3), dtype=np.uint8)
    
    #remove scientific notation
    np.set_printoptions(suppress=True)

    model = YOLO(modelPath, "v8")

    while True:
        cam2_input_img = cam2_input_stream.grabFrame(img)
        detect_params = model.predict(source = cam2_input_img, conf = 0.8, save = False)

        print(detect_params[0].numpy())
        detect_params = detect_params[0].numpy()

        if len(detect_params > 0):
            for param in detect_params:
                ring_img = cv2.rectangle(cam2_input_img, int(param[0]), int(param[1]), int(param[2]), int(param[3]), detection_colors[0], 3)
        
        cv2.imshow("rings", ring_img)


        
